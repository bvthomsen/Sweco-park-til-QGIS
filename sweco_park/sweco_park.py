# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SwecoPark
                                 A QGIS plugin
 Frontend for SWECO Park Web system
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2019-11-28
        git sha              : $Format:%H$
        copyright            : (C) 2019 by Bo Victor Thomsen, AestasGIS 
        email                : bvt@aestas.dk
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *def findLayerVariableValue (ename, evalue):

    for layer in QgsProject.instance().layerTreeRoot().findLayers():
        if evalue == QgsExpressionContextUtils.layerScope(layer.layer()).variable(ename): return layer.layer()

    return None
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt, QVariant, QDateTime
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QTreeWidget, QTreeWidgetItem, QMessageBox, QWidget, QDialog
from qgis.core import QgsProject, QgsGeometry, QgsVectorLayer, QgsLayerTreeGroup, QgsFeature, QgsField, QgsExpression, QgsFeatureRequest, QgsCoordinateTransform, QgsLayerDefinition, QgsExpressionContextUtils, QgsDataSourceUri

from PyQt5.QtSql import QSqlDatabase, QSqlQuery

# Initialize Qt resources from file resources.py
from .resources import *
import requests
from .helper import hLog, hInfo, hWarning, hCritical, tr , removeGroup, clearGroupLayer, SwecoLogin, read_config, write_config, replaceTxtfile, handleRequest #, addMemoryLayer2tree, addMemoryLayer2treeNG, cnvobj2wkt, wkbtype2simple, cnvobj2obj, fillResultTree, removeGroupLayer

from inspect import currentframe

# Import the code for the DockWidget
from .sweco_park_dockwidget import SwecoParkDockWidget

import os.path
from json import load, loads, dump, dumps

class SwecoPark:
    """QGIS Plugin Implementation."""



    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SwecoPark_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&SWECO Park')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'SwecoPark')
        self.toolbar.setObjectName(u'SwecoPark')

        #print "** INITIALIZING SwecoPark"

        self.pluginIsActive = False
        self.dockwidget = None


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SwecoPark', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse point
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToWebMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/sweco_park/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'SWECO Park '),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING SwecoPark"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD SwecoPark"

        for action in self.actions:
            self.iface.removePluginWebMenu(
                self.tr(u'&SWECO Park'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    
    def cbOmraadeTyper_currentIndexChanged (self,index):

        if index != 0: 

            waLayer = self.findLayerVariableValue('sweco_function','wareas_layer')
            if waLayer is None:
                hCritical ('SWECO Load data','Table with workareas not found',10)

            else:

                # Clear drop-down and set first entry
                self.dockwidget.cbOmraadeNavne.clear()
                self.dockwidget.cbOmraadeNavne.addItem('..Vælg områdenavn..')
    
                # Find alle områder med selekteret areatype
                expr = QgsExpression('"areatype"=\'{}\''.format(self.dockwidget.cbOmraadeTyper.currentText()))
                features = waLayer.getFeatures(QgsFeatureRequest(expr))
            
                for f in features:    
                    self.dockwidget.cbOmraadeNavne.addItem(f["name"])

    def cbOmraadeNavne_currentIndexChanged (self,index):

        if index != 0:

            waLayer = self.findLayerVariableValue('sweco_function','wareas_layer')
            if waLayer is None:
                hCritical ('SWECO Areanames changed','Table with workareas not found',10)

            else:

                # Set project variable to name
                QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'CurrentWorkarea',QVariant(self.dockwidget.cbOmraadeNavne.currentText()))
     
                # Find alle områder med type tid
                expr = QgsExpression('"name"=\'{}\''.format(self.dockwidget.cbOmraadeNavne.currentText()))
                features = waLayer.getFeatures(QgsFeatureRequest(expr))  
    
                for feature in features:
    
                  # get the geometry
                  rect = feature.geometry().boundingBox()
      
                  # Find the coordinate reference system for the project
                  dest_crs = QgsProject.instance().crs()
      
                  # Find the coordinate reference system for the layer
                  results_crs = waLayer.sourceCrs() 
      
                  if dest_crs != results_crs: 
                  
                    # If 2 different crs, set up transformation
                    transform = QgsCoordinateTransform(results_crs, dest_crs, QgsProject.instance())
      
                    # And transform the rectangle to the projekt crs
                    rect = transform.transformBoundingBox(rect)
      
                  # Set the map canvas to the relevanr section rectangle                 
                  self.iface.mapCanvas().setExtent(rect, False)            
                  self.iface.mapCanvas().refresh()


    def pbNulstilRettelser_clicked (self):

        gpkg_path = os.path.join(self.plugin_dir,'swecodata.gpkg')
        noError = 0
        
        pntLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pnt_reference"]), "Point reference layer", "ogr")
        if not pntLayerRef.isValid(): 
            hCritical ('SWECO zeroing layers','Table with reference point elements not found',10)
            noError += 1
            
        linLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Lin_reference"]), "Line reference layer", "ogr")
        if not linLayerRef.isValid(): 
            hCritical ('SWECO zeroing layers','Table with reference line elements not found',10)
            noError += 1

        polLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pol_reference"]), "Polygon reference layer", "ogr")
        if not polLayerRef.isValid(): 
            hCritical ('SWECO zeroing layers','Table with reference polygon elements not found',10)
            noError += 1
        
        pntLayer = self.findLayerVariableValue('sweco_function','points_layer')
        if pntLayer is None: 
            hCritical ('SWECO zeroing layers','Table with point elements not found',10)
            noError += 1

        linLayer = self.findLayerVariableValue('sweco_function','lines_layer')
        if linLayer is None: 
            hCritical ('SWECO zeroing layers','Table with line elements not found',10)
            noError += 1

        polLayer = self.findLayerVariableValue('sweco_function','polygons_layer')
        if polLayer is None: 
            hCritical ('SWECO zeroing layers','Table with polygon elements not found',10)
            noError += 1

        attLayer = self.findLayerVariableValue('sweco_function','element_detail_layer')
        if attLayer is None: 
            hCritical ('SWECO zeroing layers','Table with element attributes not found',10)
            noError += 1

        gpkg_path = attLayer.dataProvider().dataSourceUri().split('|')
        attLayerRef = QgsVectorLayer("{}|{}_ref".format(gpkg_path[0],gpkg_path[1]), "Element attributes reference layer", "ogr")

        if not attLayerRef.isValid(): 
            hCritical ('SWECO zeroing layers','Table with element attribute references not found',10)
            noError += 1

        if noError == 0:

            qm = QMessageBox
            if qm.question(None,'Nulstil element-tabeller', "Skal alle data i tabellerne Punkter, Linjer, Flader og Element attributter slettes (inkl. evt. rettelser) ?", qm.Yes | qm.No) == qm.Yes:
    
                pntLayerRef.dataProvider().truncate()
                pntLayer.dataProvider().truncate()
                linLayerRef.dataProvider().truncate()
                linLayer.dataProvider().truncate()
                polLayerRef.dataProvider().truncate()
                polLayer.dataProvider().truncate()
                attLayerRef.dataProvider().truncate()
                attLayer.dataProvider().truncate()
    
                self.iface.mapCanvas().refreshAllLayers()
                hInfo('SWECO Nulstil element-tabeller',"Data er slettet",5)

                # Remove existing group    
                groupName = 'SWECO data differencer'
                removeGroup(groupName)

            
            else:
                hInfo('SWECO Nulstil element-tabeller',"Handling ikke gennemført", 5)

        else:
            hCritical ('SWECO truncating layers','One or more errors has disabled layer truncating',10)

    def pbVisRettelser_clicked (self):
    
        # Remove existing group    
        groupName = 'SWECO data differencer'
        removeGroup(groupName)

        if self.dockwidget.pbVisRettelser.isChecked():
            # Load qlr file
            gpkg_path = os.path.join(self.plugin_dir,'swecodiff.qlr')
            root = QgsProject.instance().layerTreeRoot()
            #gpkg_path = replaceTxtfile(gpkg_path,self.config["Values"]["Org_path"],self.plugin_dir)
            QgsLayerDefinition.loadLayerDefinition(gpkg_path, QgsProject.instance(), root)

            sdGroup = root.findGroup(groupName)
            root.insertChildNode(0, sdGroup.clone())
            root.removeChildNode(sdGroup)
        
    def pbOverfoerRettelser_clicked (self):

        self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

        noError = 0        
        
        # Ordinary layers
        pntLayer = self.findLayerVariableValue('sweco_function','points_layer')
        if pntLayer is None: 
            hCritical ('SWECO transfer modifications','Layer with point elements not found',10)
            noError += 1

        linLayer = self.findLayerVariableValue('sweco_function','lines_layer')
        if linLayer is None: 
            hCritical ('SWECO transfer modifications','Table with line elements not found',10)
            noError += 1

        polLayer = self.findLayerVariableValue('sweco_function','polygons_layer')
        if polLayer is None: 
            hCritical ('SWECO transfer modifications','Table with polygon elements not found',10)
            noError += 1

        attLayer = self.findLayerVariableValue('sweco_function','element_detail_layer')
        if attLayer is None: 
            hCritical ('SWECO transfer modifications','Table with element attributes not found',10)
            noError += 1

        gpkg_path = attLayer.dataProvider().dataSourceUri().split('|')
        attLayerRef = QgsVectorLayer("{}|{}_ref".format(gpkg_path[0],gpkg_path[1]), "Element attributes reference layer", "ogr")


        # Reference layers
        gpkg_path = os.path.join(self.plugin_dir,'swecodata.gpkg')
        
        pntLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pnt_reference"]), "Point reference layer", "ogr")
        if not pntLayerRef.isValid(): 
            hCritical ('SWECO transfer modifications','Table with reference point elements not found',10)
            noError += 1
            
        linLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Lin_reference"]), "Line reference layer", "ogr")
        if not linLayerRef.isValid(): 
            hCritical ('SWECO transfer modifications','Table with reference line elements not found',10)
            noError += 1

        polLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pol_reference"]), "Polygon reference layer", "ogr")
        if not polLayerRef.isValid(): 
            hCritical ('SWECO transfer modifications','Table with reference polygon elements not found',10)
            noError += 1

        gpkg_path = attLayer.dataProvider().dataSourceUri().split('|')
        attLayerRef = QgsVectorLayer("{}|{}_ref".format(gpkg_path[0],gpkg_path[1]), "Element attributes reference layer", "ogr")
        if not polLayerRef.isValid(): 
            hCritical ('SWECO transfer modifications','Table with reference polygon elements not found',10)
            noError += 1


        # Layers with added elements
        pntLayerAdded = self.findLayerVariableValue('sweco_function','points_layer_added')
        if pntLayerAdded is None: 
            hCritical ('SWECO transfer modifications','Layer with added point elements not found',10)
            noError += 1

        linLayerAdded = self.findLayerVariableValue('sweco_function','lines_layer_added')
        if linLayerAdded is None: 
            hCritical ('SWECO transfer modifications','Table with added line elements not found',10)
            noError += 1

        polLayerAdded = self.findLayerVariableValue('sweco_function','polygons_layer_added')
        if polLayerAdded is None: 
            hCritical ('SWECO transfer modifications','Table with added polygon elements not found',10)
            noError += 1

        # Layers with modified elements
        pntLayerModified = self.findLayerVariableValue('sweco_function','points_layer_modified')
        if pntLayerModified is None: 
            hCritical ('SWECO transfer modifications','Layer with modified point elements not found',10)
            noError += 1

        linLayerModified = self.findLayerVariableValue('sweco_function','lines_layer_modified')
        if linLayerModified is None: 
            hCritical ('SWECO transfer modifications','Table with modified line elements not found',10)
            noError += 1

        polLayerModified = self.findLayerVariableValue('sweco_function','polygons_layer_modified')
        if polLayerModified is None: 
            hCritical ('SWECO transfer modifications','Table with modified polygon elements not found',10)
            noError += 1

        # Layers with deleted elements
        pntLayerDeleted = self.findLayerVariableValue('sweco_function','points_layer_deleted')
        if pntLayerDeleted is None: 
            hCritical ('SWECO transfer modifications','Layer with deleted point elements not found',10)
            noError += 1

        linLayerDeleted = self.findLayerVariableValue('sweco_function','lines_layer_deleted')
        if linLayerDeleted is None: 
            hCritical ('SWECO transfer modifications','Table with deleted line elements not found',10)
            noError += 1

        polLayerDeleted = self.findLayerVariableValue('sweco_function','polygons_layer_deleted')
        if polLayerDeleted is None: 
            hCritical ('SWECO transfer modifications','Table with deleted polygon elements not found',10)
            noError += 1

        if noError == 0:
            noErr = 0
            
            # Upload all added objects
            url = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["CreateElement"].format(self.ticket)
            noAdd = 0

            feats = pntLayerAdded.getFeatures()
            
            for f in feats:

                fd = {'GeometryWkt':f.geometry().asWkt(),'Measure':'1', 'ElementAttributes': self.getElementAttributesList (str(f['id'])), 'Name':str(f['name']),'ElementTypeId':str(f['et_id']),'Origin':'onsite'}
                scode, dict = handleRequest (True,url,fd,currentframe().f_code.co_name)
                if scode == 200:
                    noAdd += self.updateReturnElement(dict, str(f['id']),pntLayer, pntLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload added point: {} error : {}'.format (f['fid'],scode),'Sweco Errors')

            feats = linLayerAdded.getFeatures()
            
            for f in feats:

                fd = {'GeometryWkt':f.geometry().asWkt(),'Measure':str(f.geometry().length()), 'ElementAttributes': self.getElementAttributesList (str(f['id'])),'Name':str(f['name']),'ElementTypeId':str(f['et_id']),'Origin':'onsite'}
                scode, dict = handleRequest (True,url,fd,currentframe().f_code.co_name)
                if scode == 200:
                    noAdd += self.updateReturnElement(dict, str(f['id']),linLayer, linLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload added line: {} error : {}'.format (f['fid'],scode),'Sweco Errors')
                    
            feats = polLayerAdded.getFeatures()

            for f in feats:
                fd = {'GeometryWkt':f.geometry().asWkt(),'Measure':str(f.geometry().area()),'Perimeter':str(f.geometry().length()), 'ElementAttributes': self.getElementAttributesList (str(f['id'])),'Name':str(f['name']),'ElementTypeId':str(f['et_id']),'Origin':'onsite'}
                scode, dict = handleRequest (True,url,fd,currentframe().f_code.co_name)
                if scode == 200:
                    noAdd += self.updateReturnElement(dict, str(f['id']),polLayer, polLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload added polygon: {} error : {}'.format (f['fid'],scode),'Sweco Errors')


            # Upload all modified objects
            url = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["UpdateElement"].format(self.ticket)
            noMod = 0

            feats = pntLayerModified.getFeatures()

            for f in feats:
                fd = {'GeometryWkt':f.geometry().asWkt(),'Measure':'1', 'ElementAttributes': self.getElementAttributesList (str(f['id'])),'Name':str(f['name']),'ElementTypeId':str(f['et_id']),'Id':str(f['id']),'Origin':None}
                scode, dict = handleRequest (True,url,fd,currentframe().f_code.co_name)
                if scode == 200:
                    noMod += self.updateReturnElement(dict, str(f['id']),pntLayer, pntLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload modified point: {} error : {}'.format (f['fid'],scode),'Sweco Errors')

            feats = linLayerModified.getFeatures()

            for f in feats:
                fd = {'GeometryWkt':f.geometry().asWkt(),'Measure':str(f.geometry().length()), 'ElementAttributes': self.getElementAttributesList (str(f['id'])),'Name':str(f['name']),'ElementTypeId':str(f['et_id']),'Id':str(f['id']),'Origin':None}
                scode, dict = handleRequest (True,url,fd,currentframe().f_code.co_name)
                if scode == 200:
                    noMod += self.updateReturnElement(dict, str(f['id']),linLayer, linLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload modified line: {} error : {}'.format (f['fid'],scode),'Sweco Errors')

            feats = polLayerModified.getFeatures()

            for f in feats:

                fd = {'GeometryWkt':f.geometry().asWkt(),'Measure':str(f.geometry().area()),'Perimeter':str(f.geometry().length()), 'ElementAttributes': self.getElementAttributesList (str(f['id'])),'Name':str(f['name']),'ElementTypeId':str(f['et_id']),'Id':str(f['id']),'Origin':None}
                scode, dict = handleRequest (True,url,fd,currentframe().f_code.co_name)
                if scode == 200:
                    noMod += self.updateReturnElement(dict, str(f['id']),polLayer, polLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload modified polygon: {} error : {}'.format (f['fid'],scode),'Sweco Errors')

            # Upload all deleted objects
            noDel = 0
            feats = pntLayerDeleted.getFeatures()

            for f in feats:

                url = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["DeleteElement"].format(str(f['id']),self.ticket)
                scode, dict = handleRequest (True,url,None,currentframe().f_code.co_name)
                if scode == 200:
                    noDel += self.updateReturnElementDel(dict, str(f['id']), pntLayer, pntLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload deleted point: {} error : {}'.format (f['fid'],scode),'Sweco Errors')

            feats = linLayerDeleted.getFeatures()

            for f in feats:
                url = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["DeleteElement"].format(str(f['id']),self.ticket)
                scode, dict = handleRequest (True,url,None,currentframe().f_code.co_name)
                if scode == 200:
                    noDel += self.updateReturnElementDel(dict, str(f['id']), linLayer, linLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload deleted line: {} error : {}'.format (f['fid'],scode),'Sweco Errors')

            feats = polLayerDeleted.getFeatures()

            for f in feats:

                url = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["DeleteElement"].format(str(f['id']),self.ticket)
                scode, dict = handleRequest (True,url,None,currentframe().f_code.co_name)
                if scode == 200:
                    noDel += self.updateReturnElementDel(dict, str(f['id']), polLayer, polLayerRef, attLayer, attLayerRef)
                else:
                    noErr += 1
                    hLog ('Upload deleted pol: {} error : {}'.format (f['fid'],scode),'Sweco Errors')
            
            hInfo ('SWECO transfer modifications','Total number of elements added: {}; modified {}; deleted: {}; upload errors {}'.format(noAdd,noMod,noDel,noErr) ,10)

        else:
            hCritical ('SWECO transfer modifications','One or more errors has disabled function - Is modification layers visible ?',10)
        
    def getElementAttributesList (self, id):

        ealist = []
    
        etLayer = self.findLayerVariableValue('sweco_function','element_detail_layer')

        if etLayer is None: 
            hCritical ('SWECO upload data','Table with element attributes not found',10)

        else:

            for f in etLayer.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id))):
                d = {}
                d["ElementAttributeTypeId"] = f['elementattributetypeid'] 
                d["Id"] = f['id'] 
                d["Name"] = f['name'] 
                d["Value"] = f['value'] 
                #d["Key"] = None if f['key'] == '' else f['key'] 
                #d["Description"] = None if f['description'] == '' else f['description'] 
                #d["Unit"] = None if f['unit'] == '' else f['unit'] 
                #d["DataType"] = None if f['datatype'] == '' else f['datatype'] 
                #d["Mandatory"] = None if f['mandatory'] == '' else f['mandatory'] 
                #d["ReadOnly"] = None if f['readonly'] == '' else f['readonly'] 
                #d["DefaultValue"] = None if f['defaultvalue'] == '' else f['defaultvalue'] 
                #d["ValidationMin"] = None if f['validationmin'] == '' else f['validationmin'] 
                #d["ValidationMax"] = None if f['validationmax'] == '' else f['validationmax'] 
                #d["ValidationDecimal"] = None if f['validationdecimal'] == '' else f['validationdecimal'] 
                #d["ValidationExpression"] = None if f['validationexpression'] == '' else f['validationexpression'] 
                #d["ValidationSqlExpression"] = None if f['validationsqlexpression'] == '' else f['validationsqlexpression'] 
                #d["ValidationErrMessage"] = None if f['validationerrmessage'] == '' else f['validationerrmessage'] 
                #d["ValidationValues"] = None if f['validationvalues'] == '' else f['validationvalues'] 
                #d["Children"] = None if f['children'] == '' else f['children'] 
                #d["Parent"] = None if f['parent'] == '' else f['parent'] 
                ealist.append(d)           
        
        return ealist

    def pbFortrydRettelser_clicked (self):


        noError = 0        
        
        # Ordinary layers
        pntLayer = self.findLayerVariableValue('sweco_function','points_layer')
        if pntLayer is None: 
            hCritical ('SWECO cancel modifications','Layer with point elements not found',10)
            noError += 1

        linLayer = self.findLayerVariableValue('sweco_function','lines_layer')
        if linLayer is None: 
            hCritical ('SWECO cancel modifications','Table with line elements not found',10)
            noError += 1

        polLayer = self.findLayerVariableValue('sweco_function','polygons_layer')
        if polLayer is None: 
            hCritical ('SWECO cancel modifications','Table with polygon elements not found',10)
            noError += 1

        attLayer = self.findLayerVariableValue('sweco_function','element_detail_layer')
        if attLayer is None: 
            hCritical ('SWECO cancel modifications','Table with element attributes not found',10)
            noError += 1

        # Layers with added elements
        pntLayerAdded = self.findLayerVariableValue('sweco_function','points_layer_added')
        if pntLayerAdded is None: 
            hCritical ('SWECO cancel modifications','Layer with added point elements not found',10)
            noError += 1

        linLayerAdded = self.findLayerVariableValue('sweco_function','lines_layer_added')
        if linLayerAdded is None: 
            hCritical ('SWECO cancel modifications','Table with added line elements not found',10)
            noError += 1

        polLayerAdded = self.findLayerVariableValue('sweco_function','polygons_layer_added')
        if polLayerAdded is None: 
            hCritical ('SWECO cancel modifications','Table with added polygon elements not found',10)
            noError += 1

        # Layers with modified elements
        pntLayerModified = self.findLayerVariableValue('sweco_function','points_layer_modified')
        if pntLayerModified is None: 
            hCritical ('SWECO cancel modifications','Layer with modified point elements not found',10)
            noError += 1

        linLayerModified = self.findLayerVariableValue('sweco_function','lines_layer_modified')
        if linLayerModified is None: 
            hCritical ('SWECO cancel modifications','Table with modified line elements not found',10)
            noError += 1

        polLayerModified = self.findLayerVariableValue('sweco_function','polygons_layer_modified')
        if polLayerModified is None: 
            hCritical ('SWECO cancel modifications','Table with modified polygon elements not found',10)
            noError += 1

        # Layers with deleted elements
        pntLayerDeleted = self.findLayerVariableValue('sweco_function','points_layer_deleted')
        if pntLayerDeleted is None: 
            hCritical ('SWECO cancel modifications','Layer with deleted point elements not found',10)
            noError += 1

        linLayerDeleted = self.findLayerVariableValue('sweco_function','lines_layer_deleted')
        if linLayerDeleted is None: 
            hCritical ('SWECO cancel modifications','Table with deleted line elements not found',10)
            noError += 1

        polLayerDeleted = self.findLayerVariableValue('sweco_function','polygons_layer_deleted')
        if polLayerDeleted is None: 
            hCritical ('SWECO cancel modifications','Table with deleted polygon elements not found',10)
            noError += 1

        if noError == 0:

            gpkg_path = os.path.join(self.plugin_dir,'swecodata.gpkg')

            db = QSqlDatabase.addDatabase("QSPATIALITE")
            db.setDatabaseName(gpkg_path)

            if db.open():

                query = QSqlQuery()

                # points....
                
                # Delete from add list and modified list
                lst1 =[]
                for f in pntLayerAdded.selectedFeatures():    lst1.append (str(f['id']))
                for f in pntLayerModified.selectedFeatures(): lst1.append (str(f['id']))

                # Add from delete and modified list
                lst3 = []
                for f in pntLayerDeleted.selectedFeatures(): lst3.append (f['id'])
                for f in pntLayerModified.selectedFeatures(): lst3.append (f['id'])

                if lst1: 
                    sqlTxt = "delete from element_attributes where elementid in {};".format("('" + "','".join(lst1) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')
                    sqlTxt = "delete from elements_pnt        where id        in {};".format("('" + "','".join(lst1) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                if lst3: 
                    fl = [field.name() for field in pntLayer.fields()]
                    fl.remove('fid')
                    fl.append('geom')
                    ft = ','.join(fl)
                    sqlTxt = "insert into elements_pnt ({}) select {} from elements_pnt_ref where id in {};".format(ft,ft,"('" + "','".join(lst3) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                    fl = [field.name() for field in attLayer.fields()]
                    fl.remove('fid')
                    ft = ','.join(fl)
                    sqlTxt = "insert into element_attributes ({}) select {} from element_attributes_ref where elementid in {};".format(ft,ft,"('" + "','".join(lst3) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                # lines....
                
                # Delete from add list and modified list
                lst1 =[]
                for f in linLayerAdded.selectedFeatures():    lst1.append (str(f['id']))
                for f in linLayerModified.selectedFeatures(): lst1.append (str(f['id']))

                # Add from delete and modified list
                lst3 = []
                for f in linLayerDeleted.selectedFeatures(): lst3.append (f['id'])
                for f in linLayerModified.selectedFeatures(): lst3.append (f['id'])

                if lst1: 
                    sqlTxt = "delete from element_attributes where elementid in {};".format("('" + "','".join(lst1) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')
                    sqlTxt = "delete from elements_lin        where id        in {};".format("('" + "','".join(lst1) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                if lst3: 
                    fl = [field.name() for field in linLayer.fields()]
                    fl.remove('fid')
                    fl.append('geom')
                    ft = ','.join(fl)
                    sqlTxt = "insert into elements_lin ({}) select {} from elements_lin_ref where id in {};".format(ft,ft,"('" + "','".join(lst3) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                    fl = [field.name() for field in attLayer.fields()]
                    fl.remove('fid')
                    ft = ','.join(fl)
                    sqlTxt = "insert into element_attributes ({}) select {} from element_attributes_ref where elementid in {};".format(ft,ft,"('" + "','".join(lst3) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')
                    
                # polygons....
                
                # Delete from add list and modified list
                lst1 =[]
                for f in polLayerAdded.selectedFeatures():    lst1.append (str(f['id']))
                for f in polLayerModified.selectedFeatures(): lst1.append (str(f['id']))

                # Add from delete and modified list
                lst3 = []
                for f in polLayerDeleted.selectedFeatures(): lst3.append (f['id'])
                for f in polLayerModified.selectedFeatures(): lst3.append (f['id'])

                if lst1: 
                    sqlTxt = "delete from element_attributes where elementid in {};".format("('" + "','".join(lst1) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')
                    sqlTxt = "delete from elements_pol        where id        in {};".format("('" + "','".join(lst1) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                if lst3: 
                    fl = [field.name() for field in polLayer.fields()]
                    fl.remove('fid')
                    fl.append('geom')
                    ft = ','.join(fl)
                    sqlTxt = "insert into elements_pol ({}) select {} from elements_pol_ref where id in {};".format(ft,ft,"('" + "','".join(lst3) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                    fl = [field.name() for field in attLayer.fields()]
                    fl.remove('fid')
                    ft = ','.join(fl)
                    sqlTxt = "insert into element_attributes ({}) select {} from element_attributes_ref where elementid in {};".format(ft,ft,"('" + "','".join(lst3) + "')")
                    query.exec_(sqlTxt) 
                    hLog ('sql: {} ... error: {}'.format(sqlTxt,db.lastError().text() ),'Sweco')

                db.close()
                
                for layer in [polLayerAdded,polLayerModified,polLayerDeleted,polLayer,linLayerAdded,linLayerModified,linLayerDeleted,linLayer,pntLayerAdded,pntLayerModified,pntLayerDeleted,pntLayer,attLayer]:
                    layer.setDataSource(layer.source(), layer.name(), layer.providerType())
                self.iface.mapCanvas().refreshAllLayers()

                    
            else:
                hCritical ('SWECO cancel modifications','Cannot open database:{}, Error is: {}'.format (gpkg_path,db.lastError().text()),10)

        else:
            hCritical ('SWECO cancel modifications','One or more errors has disabled function',10)
        


    def pbImporterData_clicked (self):

        self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

        gpkg_path = os.path.join(self.plugin_dir,'swecodata.gpkg')
        noError = 0
        
        pntLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pnt_reference"]), "Point reference layer", "ogr")
        if not pntLayerRef.isValid(): 
            hCritical ('SWECO Import data','Table with reference point elements not found',10)
            noError += 1
            
        linLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Lin_reference"]), "Line reference layer", "ogr")
        if not linLayerRef.isValid(): 
            hCritical ('SWECO Import data','Table with reference line elements not found',10)
            noError += 1

        polLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pol_reference"]), "Polygon reference layer", "ogr")
        if not polLayerRef.isValid(): 
            hCritical ('SWECO Import data','Table with reference polygon elements not found',10)
            noError += 1
        
        pntLayer = self.findLayerVariableValue('sweco_function','points_layer')
        if pntLayer is None: 
            hCritical ('SWECO Import data','Table with point elements not found',10)
            noError += 1

        linLayer = self.findLayerVariableValue('sweco_function','lines_layer')
        if linLayer is None: 
            hCritical ('SWECO Import data','Table with line elements not found',10)
            noError += 1

        polLayer = self.findLayerVariableValue('sweco_function','polygons_layer')
        if polLayer is None: 
            hCritical ('SWECO Import data','Table with polygon elements not found',10)
            noError += 1

        if noError == 0:
      
            # Generate list of checked items in element tree
            tree = self.dockwidget.twElementTyper.invisibleRootItem()
            etListe = self.findChooseSection(tree)
            noEle = 0     
            # Iterate list with element types 
            for et in etListe:
    
                # set receiveing layers
                if et['tp'] == 'P':
                    layer = pntLayer
                    layerRef = pntLayerRef
                elif et['tp'] == 'L':
                    layer = linLayer
                    layerRef = linLayerRef
                else:
                    layer = polLayer
                    layerRef = polLayerRef
    
                # Get dict with elements
                http = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetElementsId"].format(self.ticket,et['id'])
                scode, dict = handleRequest (True,http,None,currentframe().f_code.co_name)
                if scode == 200:

                    i = 0
                    feats = []
                    tNow = QDateTime.currentDateTime()

                    if "Elements" in dict:

                        for d in dict["Elements"]:
                        
                            f = QgsFeature(layer.fields())
                            f.setGeometry(QgsGeometry.fromWkt(d["GeometryWkt"]))
                            f.setAttribute('id', d["Id"])
                            f.setAttribute('key', d["Key"])
                            f.setAttribute('name', d["Name"])
                            f.setAttribute('et_id', d["ElementTypeId"])
                            f.setAttribute('et_key', d["ElementTypeKey"])
                            f.setAttribute('et_name', d["ElementTypeName"])
                            f.setAttribute('modified', tNow)
                            feats.append(f)    
                        
                            i += 1
                            #if i>= 100: break
                        noEle += i                         
                        pr = layer.dataProvider()    
                        prRef = layerRef.dataProvider()    
                        
                        pr.addFeatures(feats)
                        prRef.addFeatures(feats)
                        
                        #layer.updateExtents() 
                        
                        hLog ('Elementimport - Id: {}, No of imports: {} / {}'.format(et['id'],i,dict['TotalCount']),'Sweco')

                    else:                    
                        hCritical ('SWECO Park rest-api','SWECO not responding as expected, no data fetched',10)
                    
                else:
                    hCritical ('SWECO Park rest-api','GetElementsId HTTP response code = ' + str (scode),10)

                for layer in [polLayer,linLayer,pntLayer]:
                    layer.setDataSource(layer.source(), layer.name(), layer.providerType())
                
                self.iface.mapCanvas().refreshAllLayers()

            hInfo ('SWECO Import data','Total number of elements imported: {}'.format(noEle),10)
        else:
            hCritical ('SWECO Import data','One or more errors has disabled element import',10)
            
    def pbImporterAlle_clicked (self):

        self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

        gpkg_path = os.path.join(self.plugin_dir,'swecodata.gpkg')
        noError = 0
        
        pntLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pnt_reference"]), "Point reference layer", "ogr")
        if not pntLayerRef.isValid(): 
            hCritical ('SWECO Import data','Table with reference point elements not found',10)
            noError += 1
            
        linLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Lin_reference"]), "Line reference layer", "ogr")
        if not linLayerRef.isValid(): 
            hCritical ('SWECO Import data','Table with reference line elements not found',10)
            noError += 1

        polLayerRef = QgsVectorLayer("{}|layername={}".format(gpkg_path,self.config["Values"]["Pol_reference"]), "Polygon reference layer", "ogr")
        if not polLayerRef.isValid(): 
            hCritical ('SWECO Import data','Table with reference polygon elements not found',10)
            noError += 1
        
        pntLayer = self.findLayerVariableValue('sweco_function','points_layer')
        if pntLayer is None: 
            hCritical ('SWECO Import data','Table with point elements not found',10)
            noError += 1

        linLayer = self.findLayerVariableValue('sweco_function','lines_layer')
        if linLayer is None: 
            hCritical ('SWECO Import data','Table with line elements not found',10)
            noError += 1

        polLayer = self.findLayerVariableValue('sweco_function','polygons_layer')
        if polLayer is None: 
            hCritical ('SWECO Import data','Table with polygon elements not found',10)
            noError += 1

        if noError == 0:
      
            # Generate list of checked items in element tree
            tree = self.dockwidget.twElementTyper.invisibleRootItem()
            etListe = self.findChooseSection(tree)

            # Get dict with elements
            http = self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetElementsAll"].format(self.ticket)
            scode, dict = handleRequest (True,http,None,currentframe().f_code.co_name)
            if scode == 200:

                if "Elements" in dict:
                    i = 0
                    featsPnt = []
                    featsLin = []
                    featsPol = []
                    tNow = QDateTime.currentDateTime()
                    
                    # Iterate list with element types 
                    for d in dict["Elements"]:

                        geom = QgsGeometry.fromWkt(d["GeometryWkt"])
                        gt = geom.type()
                        fields = pntLayer.fields() if gt == 0 else linLayer.fields() if gt == 1 else polLayer.fields() 
                        f = QgsFeature(fields)
                        f.setGeometry(geom)
                        f.setAttribute('id', d["Id"])
                        f.setAttribute('key', d["Key"])
                        f.setAttribute('name', d["Name"])
                        f.setAttribute('et_id', d["ElementTypeId"])
                        f.setAttribute('et_key', d["ElementTypeKey"])
                        f.setAttribute('et_name', d["ElementTypeName"])
                        f.setAttribute('modified', tNow)
    
                        featsPnt.append(f) if gt == 0 else featsLin.append(f) if gt == 1 else featsPol.append(f)    
    
                        i += 1
                        
                    pntLayer.dataProvider().addFeatures(featsPnt)
                    pntLayerRef.dataProvider().addFeatures(featsPnt)
                    linLayer.dataProvider().addFeatures(featsLin)
                    linLayerRef.dataProvider().addFeatures(featsLin)
                    polLayer.dataProvider().addFeatures(featsPol)
                    polLayerRef.dataProvider().addFeatures(featsPol)
    
                    for layer in [polLayer,linLayer,pntLayer]:
                        layer.setDataSource(layer.source(), layer.name(), layer.providerType())
                
                    self.iface.mapCanvas().refreshAllLayers()
                   
                    hInfo ('SWECO Import data','Elementimport - Alle: No of imports: {} / {}'.format(i,dict['TotalCount']),10)

                else:                    
                    hCritical ('SWECO Park rest-api','SWECO not responding as expected, no data fetched',10)

            else:
                hCritical ('SWECO Park rest-api','GetElementsId HTTP response code = ' + str (scode),10)

        else:
            hCritical ('SWECO Import data','One or more errors has disabled element import',10)

    def prepare_gpkg_data (self):

        # Remove existing group    
        groupName = 'SWECO data'
        removeGroup(groupName)
        removeGroup('SWECO data differencer')


        # Set project variable to default value 
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'CurrentWorkarea',QVariant('*nobody*'))

        # Load qlr file
        gpkg_path = os.path.join(self.plugin_dir,'swecodata.qlr')
        root = QgsProject.instance().layerTreeRoot()
        #gpkg_path = replaceTxtfile(gpkg_path,self.config["Values"]["Org_path"],self.plugin_dir)
        #hLog ('Path to temp qlr is: ' + gpkg_path,'Sweco')
        QgsLayerDefinition.loadLayerDefinition(gpkg_path, QgsProject.instance(), root)
        
    def findLayerVariableValue (self,ename, evalue):
    
        for layer in QgsProject.instance().layerTreeRoot().findLayers():
            if evalue == QgsExpressionContextUtils.layerScope(layer.layer()).variable(ename): return layer.layer()

        return None

    def workareatypesUpdateData(self):

        wtLayer = self.findLayerVariableValue('sweco_function','wtypes_layer')
        if wtLayer is None:
            hCritical ('SWECO Update workarea types','Table for workarea types not found',10)

        else:

            self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

            # Get dict with omraadetyper
            scode, dict = handleRequest (False,self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetWorkAreaTypes"].format(self.ticket),None,currentframe().f_code.co_name)   
            if scode == 200:
                
                if "WorkAreaTypes" in dict:

                    pr = wtLayer.dataProvider()
                    pr.truncate()
                    feats = []
                    for d in dict["WorkAreaTypes"]:
    
                      f = QgsFeature(wtLayer.fields())
                      f.setAttribute('id', d["Id"])
                      f.setAttribute('key', d["Key"])
                      f.setAttribute('name', d["Name"])
                      f.setAttribute('level', d["Level"])
                      feats.append(f)
                    
                    pr.addFeatures(feats)
                    hInfo ('SWECO Arbejdsområdetyper','Opdateret, I alt: {} hentet'.format(dict['TotalCount']),2)   

                else:                    
                    hCritical ('SWECO Park rest-api','SWECO not responding as expected, no data fetched',10)

            else:
                hCritical ('SWECO Park rest-api','GetWorkAreaTypes HTTP response code = ' + str (scode),10)

    def elementtypesUpdateData(self):
        
        etLayer = self.findLayerVariableValue('sweco_function','etypes_layer')
        if etLayer is None:
            hCritical ('SWECO Update element types','Table with element types not found',10)

        else:

            # Check token and maybe show login dialog
            self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

            # Get dict with elementtyper
            scode, dict = handleRequest (False,self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetElementTypes"].format(self.ticket),None,currentframe().f_code.co_name)   
            if scode == 200:

                if "ElementTypes" in dict:
 
                    pr = etLayer.dataProvider()
                    pr.truncate()
                    feats = []
                    
                    for d in dict['ElementTypes']:
    
                        f = QgsFeature(etLayer.fields())            
                        f.setAttribute('id', d["Id"])
                        f.setAttribute('key', d["Key"])
                        f.setAttribute('name', d["Name"])
                        f.setAttribute('geometrytype', d["GeometryType"])
                        f.setAttribute('allowec', d["AllowElementCreation"])
                        f.setAttribute('parentid', '')

                        scode2, dict2 = handleRequest (False,self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetElementTypeDetail"].format(d["Id"],self.ticket),None,currentframe().f_code.co_name)

                        if scode2 == 200:
                        
                            if dict2["Parent"] is None:
                                f.setAttribute('parentid', '')
                            else:
                                f.setAttribute('parentid', dict2["Parent"]["Id"])
                                
                        feats.append(f)
                    
                    pr.addFeatures(feats)
                    hInfo ('SWECO Element-typer','Opdateret, I alt: {} hentet'.format(dict['TotalCount']),2)   

                else:                    
                    hCritical ('SWECO Park rest-api','SWECO not responding as expected, no data fetched',10)
                
            else:
                hCritical ('SWECO Park rest-api','GetElementTypes HTTP response code = ' + str (scode),10)

    def workareasUpdateData(self):

        waLayer = self.findLayerVariableValue('sweco_function','wareas_layer')
        if waLayer is None:
            hCritical ('SWECO Update workareas','Table with workareas not found',10)

        else:
    
            # Check token and maybe show login dialog
            self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

            # Get dict with elementtyper
            scode, dict = handleRequest (False,self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetWorkAreasAll"].format(self.ticket),None,currentframe().f_code.co_name)   
            if scode == 200:

                if "WorkAreas" in dict:

                    pr = waLayer.dataProvider()
                    pr.truncate()
                    feats = [] 
                    
                    for d in dict['WorkAreas']:
                    
                      f = QgsFeature(waLayer.fields())
                      f.setGeometry(QgsGeometry.fromWkt(d["GeometryWkt"]))
                      f.setAttribute('id', d["Id"])
                      f.setAttribute('key', d["Key"])
                      f.setAttribute('name', d["Name"])
                      f.setAttribute('areatype', d["WorkAreaType"]["Name"])
                      feats.append(f)
                    
                    pr.addFeatures(feats)
                    waLayer.updateExtents() 
                    hInfo ('SWECO Arbejdsområder','Opdateret, I alt:{} hentet'.format(dict['TotalCount']),2)   

                else:                    
                    hCritical ('SWECO Park rest-api','SWECO not responding as expected, no data fetched',10)
            else:
                hCritical ('SWECO Park rest-api','GetWorkAreasAll HTTP response code = ' + str (scode),10)

    def getElementDetailData(self,id):

        feats = []

        edLayer = self.findLayerVariableValue('sweco_function','element_detail_layer')
        if waLayer is None:
            hCritical ('SWECO Update Element details','Table with element details not found',10)

        else:

            for f in edLayer.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id))):
                feats.append(f)

            if not feats:
            
                self.elementDetailUpdateData(id)
                for f in edLayer.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id))):
                    feats.append(f)

        return feats

    def elementDetailUpdateData(self,id):

        edLayer = self.findLayerVariableValue('sweco_function','element_detail_layer')
        if waLayer is None:
            hCritical ('SWECO Update Element details','Table with element details not found',10)

        else:
    
            # Check token and maybe show login dialog
            self.ticket, self.token = self.swecoLogin.refreshLogin(QgsExpressionContextUtils.projectScope(QgsProject.instance()).variable('sweco_start'))
            QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start', self.token)

            # Get dict with elementtyper
            scode, dict = handleRequest (False,self.config["Access"]["HttpAddress"]+ self.config["Commands"]["GetElementDetail"].format(id,self.ticket),None,currentframe().f_code.co_name)   
            if scode == 200:
            
                if "ElementAttributes" in dict:

                    pr = edLayer.dataProvider()
                    feats = [] 
                    
                    for d in dict['ElementAttributes']:
                    
                        f = QgsFeature(edLayer.fields())
                        f.setAttribute('elementid', id)
                        f.setAttribute('id', d["Id"])
                        f.setAttribute('key', d["Key"])
                        f.setAttribute('name', d["Name"])
                        f.setAttribute('description', d["Description"])
                        f.setAttribute('unit', d["Unit"])
                        f.setAttribute('datatype', d["DataType"])
                        f.setAttribute('mandatory', d["Mandatory"])
                        f.setAttribute('readonly', d["ReadOnly"])
                        f.setAttribute('defaultvalue', d["DefaultValue"])
                        f.setAttribute('value', d["Value"])
                        f.setAttribute('validationmin', d["ValidationMin"])
                        f.setAttribute('validationmax', d["ValidationMax"])
                        f.setAttribute('validationdecimal', d["ValidationDecimal"])
                        f.setAttribute('validationexpression', d["ValidationExpression"])
                        f.setAttribute('validationsqlexpression', d["ValidationSqlExpression"])
                        f.setAttribute('validationerrmessage', d["ValidationErrMessage"])
                        f.setAttribute('elementattributetypeid', d["ElementAttributeTypeId"])
                        f.setAttribute('validationvalues', d["ValidationValues"])
                        feats.append(f)
                      
                    pr.addFeatures(feats)

                else:                    
                    hCritical ('SWECO Park rest-api','SWECO not responding as expected, no data fetched',10)
    
            else:
                hCritical ('SWECO Update Element details','GetElementDetail HTTP response code = ' + str (response.status_code),10)

    def twElementtyperLoadData (self, tree,layer):
        """
        Function to fill the trre in the "element types" dialog

        :param tree: tree widget
        :type kommando: model

        :param layer: layer contain sections
        :type kommando: layer
        """
        
        # Clear existing tree & set column width
        tree.clear()
        tree.setColumnWidth(0, 110)
        tree.setColumnWidth(1, 4)
        tree.setColumnWidth(2, 100)
        tree.setColumnWidth(3, 0)
        tree.setColumnWidth(4, 0)
        tree.setColumnWidth(5, 0)


        # Set initial reference values for "parent finder"

        # Iterate through layer sorted by parentid ascending
        for f in layer.getFeatures(QgsFeatureRequest().addOrderBy('parentid',True, True)):
            
            # hLog (str(f['id']) + ' .. ' + str(f['parentid']),'Sweco')
            
            parent = None
            
            # Is parentid blank ?
            if f['parentid'] == '':

                # Yes, set parent to tree
                parent = tree

            else:

                # No, find parent in tree
                clist = tree.findItems(str(f['parentid']), Qt.MatchExactly|Qt.MatchRecursive, 3);
                for c in clist: parent = c

            # Append row to parent
            if parent is not None: 
                child = QTreeWidgetItem(parent)
                child.setText(0, f['key'])
                child.setText(1, 'P' if f['geometrytype'] == 'Point' else 'L' if f['geometrytype'] == 'Line' else 'F')
                child.setText(2, f['name'])
                child.setText(3, f['id'])
                child.setText(4, f['parentid'])
                child.setText(5, str(f['allowec']))
                child.setFlags(child.flags() | Qt.ItemIsTristate | Qt.ItemIsUserCheckable)
                child.setCheckState(0, Qt.Unchecked)
                
        tree.setSortingEnabled(True)
        tree.sortByColumn(0,0) 
        tree.hideColumn(3)
        tree.hideColumn(4)
        tree.hideColumn(5)


    def findChooseSection (self, root):
        """
        Function to find all the section that has been chosen and return them in a list

        :param root: tree model populated with the sections
        :type kommando: model
        """

        # Create empty list
        sections = []

        # Iterate the tree
        count = root.childCount()
        for i in range(count):
            item = root.child(i)
            
            if item.checkState(0)==Qt.Unchecked:
                pass
                
            # Item is checked: add to list
            elif item.checkState(0)==Qt.Checked:
                if item.text(5) == 'True': sections.append({"tp": item.text(1),"id": item.text(3)})
                if item.childCount() > 0: sections += self.findChooseSection(item)
            
            else:
                if item.childCount() > 0: sections += self.findChooseSection(item)
        
        return sections
        
    def cbOmraadeTyperLoadData(self):

        wtLayer = self.findLayerVariableValue('sweco_function','wtypes_layer')
        if wtLayer is None:
            hCritical ('SWECO Load workarea types','Table for workarea types not found',10)

        else:
    
            # Clear drop-down and set first entry
            self.dockwidget.cbOmraadeTyper.clear()
            self.dockwidget.cbOmraadeTyper.addItem('..Vælg område type..')
    
            features = wtLayer.getFeatures()
            for f in features:    
                self.dockwidget.cbOmraadeTyper.addItem(f["name"])

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        # build the path and file name for the configuration.json
        filename = os.path.join(self.plugin_dir, "configuration.json") 
        gpkg_path = os.path.join(self.plugin_dir,'swecodata.gpkg')
        hLog(self.plugin_dir,'Sweco')
        # load json into config dictionary
        self.config = read_config(filename)

        
        # set default values for token and time
        self.ticket = ''
        self.ticketTime = ''
        
        # Create instance of swecoLogin class
        self.swecoLogin = SwecoLogin(None)

        # Generate first dummy token
        self.token = self.swecoLogin.joinToken (self.config["Access"]["HttpAddress"],self.config["Commands"]["GettingAccessToken"],self.config["Commands"]["GetElementDetail"],7000,self.config["Access"]["Username"], self.config["Access"]["Password"] , self.ticket, self.ticketTime)   

        # Show login dialog        
        self.ticket, self.token = self.swecoLogin.refreshLogin(self.token)
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_start',self.token)
        QgsExpressionContextUtils.setProjectVariable(QgsProject.instance(),'sweco_log',"{}|layername={}".format(gpkg_path,self.config["Values"]["Log_reference"]))
         
        if self.swecoLogin.lastResult == QDialog.Accepted:

            # Load qml file with relevant data and layers
            if self.swecoLogin.cbCreateLayers.isChecked():self.prepare_gpkg_data()
                
            if self.swecoLogin.cbAdmData.isChecked():
                # Update administrative data    
                self.workareatypesUpdateData()
                self.workareasUpdateData()
                self.elementtypesUpdateData()
                        
            if self.swecoLogin.cbSavePass.isChecked():
                self.config["Access"]["Username"] = self.swecoLogin.leUserName.text()
                self.config["Access"]["Password"] = self.swecoLogin.lePassword.text()
                self.config["Access"]["HttpAddress"] = self.swecoLogin.leHttpAdr.text()
                write_config(filename,self.config)                
                    
            if not self.pluginIsActive:
                self.pluginIsActive = True
    
                # dockwidget may not exist if:
                #    first run of plugin
                #    removed on close (see self.onClosePlugin method)
                if self.dockwidget == None:
                    # Create the dockwidget (after translation) and keep reference
                    self.dockwidget = SwecoParkDockWidget()
    
         
                    # build the path and file name for the configuration.json
                    #filename = os.path.join(self.plugin_dir, "configuration.json") 
    
                    # load json into config dictionary
                    #self.config = read_config(filename)

                    self.dockwidget.cbOmraadeTyper.currentIndexChanged.connect(self.cbOmraadeTyper_currentIndexChanged)
                    self.dockwidget.cbOmraadeNavne.currentIndexChanged.connect(self.cbOmraadeNavne_currentIndexChanged)
                    self.dockwidget.pbVisRettelser.clicked.connect(self.pbVisRettelser_clicked)
                    self.dockwidget.pbVisRettelser.setCheckable(True)
                    self.dockwidget.pbNulstilRettelser.clicked.connect(self.pbNulstilRettelser_clicked)
                    self.dockwidget.pbOverfoerRettelser.clicked.connect(self.pbOverfoerRettelser_clicked)
                    self.dockwidget.pbImporterData.clicked.connect(self.pbImporterData_clicked)
                    self.dockwidget.pbImporterAlle.clicked.connect(self.pbImporterAlle_clicked)
                    self.dockwidget.pbFortrydRettelser.clicked.connect(self.pbFortrydRettelser_clicked)
                
                # connect to provide cleanup on closing of dockwidget
                self.dockwidget.closingPlugin.connect(self.onClosePlugin)
    
                # show the dockwidget
                # TODO: fix to allow choice of dock location
                self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
                self.dockwidget.show()
                
            self.cbOmraadeTyperLoadData()

            layer = self.findLayerVariableValue('sweco_function','etypes_layer')
            if layer is None: 
                hCritical ('SWECO setup layers','Table with element types not found',10)
            else:
                tree = self.dockwidget.twElementTyper
                self.twElementtyperLoadData (tree,layer)

    def updateReturnElement(self, dict, id, layer, layerRef, attLayer, attLayerRef):

        hLog ('id, Dict fra updateReturnElement: ' + id + ',   ' + str(dict), 'Sweco')    
           
        if str(dict["code"]) != "0":   

            hCritical ('SWECO add/update element','Add/Update failed af SWECO, return code : {}'.format(dict["code"]),10)
            res = 0

        else:

            val = dict["value"]
    
            # Delete element attributes associated with id from aelement attributes active and from ref
            attLayer.dataProvider().deleteFeatures( [f.id() for f in attLayer.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id)))])
            attLayerRef.dataProvider().deleteFeatures( [f.id() for f in attLayerRef.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id)))])
            layer.dataProvider().deleteFeatures( [f.id() for f in layer.getFeatures(QgsFeatureRequest().setFilterExpression("id = '{}'".format(id)))])
            layerRef.dataProvider().deleteFeatures( [f.id() for f in layerRef.getFeatures(QgsFeatureRequest().setFilterExpression("id = '{}'".format(id)))])
            
            tNow = QDateTime.currentDateTime() 
    
            # add element to point/lin/pol active and ref layer
            f = QgsFeature(layer.fields())
            f.setGeometry(QgsGeometry.fromWkt(val["GeometryWkt"]))
            f.setAttribute('id', val["Id"])
            f.setAttribute('key', val["Key"])
            f.setAttribute('name', val["Name"])
            f.setAttribute('et_id', val["ElementTypeId"])
            f.setAttribute('et_key', val["ElementTypeKey"])
            f.setAttribute('et_name', val["ElementTypeName"])
            f.setAttribute('modified', tNow)
            layer.dataProvider().addFeature(f)
            layerRef.dataProvider().addFeature(f)
    
            # add element attributes to element attributes active and ref layer
            feats = []
            
            for d in val['ElementAttributes']:
            
                f = QgsFeature(attLayer.fields())
                f.setAttribute('elementid', val["Id"] or '')
                f.setAttribute('id', d["Id"] or '')
                f.setAttribute('key', d["Key"] or '')
                f.setAttribute('name', d["Name"] or '')
                f.setAttribute('description', d["Description"] or '')
                f.setAttribute('unit', d["Unit"] or '')
                f.setAttribute('datatype', d["DataType"] or '')
                f.setAttribute('mandatory', d["Mandatory"] or '')
                f.setAttribute('readonly', d["ReadOnly"] or '')
                f.setAttribute('defaultvalue', d["DefaultValue"] or '')
                f.setAttribute('value', d["Value"] or '')
                f.setAttribute('validationmin', d["ValidationMin"] or '')
                f.setAttribute('validationmax', d["ValidationMax"] or '')
                f.setAttribute('validationdecimal', d["ValidationDecimal"] or '')
                f.setAttribute('validationexpression', d["ValidationExpression"] or '')
                f.setAttribute('validationsqlexpression', d["ValidationSqlExpression"] or '')
                f.setAttribute('validationerrmessage', d["ValidationErrMessage"] or '')
                f.setAttribute('elementattributetypeid', d["ElementAttributeTypeId"] or '')
                f.setAttribute('validationvalues', d["ValidationValues"] or '')
                f.setAttribute('children', d["Children"] or '')
                f.setAttribute('parent', d["Parent"] or '')
                feats.append(f)
    
            attLayer.dataProvider().addFeatures(feats)
            attLayerRef.dataProvider().addFeatures(feats)
    
            for l in [layer,layerRef,attLayer,attLayerRef]:
                l.setDataSource(l.source(), l.name(), l.providerType())
            self.iface.mapCanvas().refreshAllLayers()
            res = 1    
    
        return res    
    
    def updateReturnElementDel(self, dict, id, layer, layerRef, attLayer, attLayerRef):

        if str(dict["code"]) != "0":   

            hCritical ('SWECO delete element','Update failed af SWECO, return code : {}'.format(dict["code"]),10)
            res = 0

        else:
        
            attLayer.dataProvider().deleteFeatures( [f.id() for f in attLayer.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id)))])
            attLayerRef.dataProvider().deleteFeatures( [f.id() for f in attLayerRef.getFeatures(QgsFeatureRequest().setFilterExpression("elementid = '{}'".format(id)))])
            layerRef.dataProvider().deleteFeatures( [f.id() for f in layerRef.getFeatures(QgsFeatureRequest().setFilterExpression("id = '{}'".format(id)))])
            res = 1    

        for l in [layer,layerRef,attLayer,attLayerRef]:
            l.setDataSource(l.source(), l.name(), l.providerType())
        self.iface.mapCanvas().refreshAllLayers()

        return res    
    
    